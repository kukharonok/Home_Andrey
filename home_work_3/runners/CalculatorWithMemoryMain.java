package home.home_work_3.runners;

import home.home_work_3.calcs.additional.CalculatorWithMemory;

/**
 * 10*. Создать CalculatorWithMemory.
 * 10.1 Данный калькулятор предназначен для того чтобы расширить возможности калькулятора и обеспечить
 * его дополнительной функцией памяти. В принципе работает как калькулятор из реальной жизни.
 * 10.2 Все методы объявленные в данном классе НЕ статические (не имеют модификатор static).
 * 10.3 Данный класс напрямую не умеет считать математику.
 * 10.4 В классе должны присутствовать математические методы:
 * 10.4.1 4 базовых математических метода (деление, умножение, вычитание, сложение).
 * 10.4.2 3 метода (Возведение в целую степень дробного положительного числа, Модуль числа, Корень из числа).
 * 10.5 Функция памяти работает через методы:
 * 10.5.1 Записать в память результат выполнения последнего вызванного метода. У данного метода не должно быть
 * параметров. Данный метод вызывается непосредтвенно пользователем, а не автоматический.
 * 10.5.2 Получить из памяти записанное значение. При получении записи из памяти память стирается, при записи
 * нового значения память перезаписывается.Данный метод вызывается непосредтвенно пользователем, а не автоматический.
 * 10.6 Создать класс CalculatorWithMemoryMain в котором будет точка входа (main метод).
 * В main методе требуется создать экземпляр калькулятора и используя методы из данного экземпляра посчитать
 * выражения из задания 1.
 * Вывести в консоль результат. В мэйне запрещается использование переменных для хранения значений участвующих
 * в просчёте, а также результатов работы методов калькулятора.
 */

public class CalculatorWithMemoryMain {

    public static void main(String[] args) {

        CalculatorWithMemory calculator = new CalculatorWithMemory();

        //пример:  4.1 + 15 * 7 + (28 / 5) ^ 2
        calculator.div(28, 5);
        calculator.record();
        calculator.pow(calculator.getMemoryValue(), 2);
        calculator.record();
        calculator.add(calculator.getMemoryValue(), 4.1);
        calculator.record();
        calculator.add(calculator.getMemoryValue(), calculator.multiply(15, 7));
        calculator.record();
        double result = calculator.getMemoryValue();
        System.out.println(result); //140.45999999999998 - значение в памяти до очистки
        System.out.println(calculator.getMemoryValue()); //0.0 - в памяти уже 0
    }
}
